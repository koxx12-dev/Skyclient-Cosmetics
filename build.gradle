// For those who want the bleeding edge
plugins {
    id 'java'
    id 'net.minecraftforge.gradle.forge' version '6f5327'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.spongepowered.mixin' version '0.6-SNAPSHOT'
}
version = mod_version
group = "io.github.koxx12-dev"
archivesBaseName = "!!" + mod_name

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"

    replace('${GRADLE_MOD_ID}', mod_id)
    replace('${GRADLE_MOD_NAME}', mod_name)
    replace('${GRADLE_MOD_DESCRIPTION}', mod_description)
    replace('${GRADLE_MOD_VERSION}', mod_version)

    clientRunArgs += "--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker"
    clientRunArgs += "--mixin mixins.scc.json"

    makeObfSourceJar = false
}

repositories {
    mavenCentral()
    maven { url "https://repo.sk1er.club/repository/maven-releases/" }
    maven { url "https://jitpack.io/" }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

configurations {
    include
    implementation.extendsFrom(include)
}
dependencies {

    include('gg.essential:loader-launchwrapper:1.1.1') {
        transitive = false
    }

    provided 'gg.essential:essential-1.8.9-forge:1495+release-launch'
    include 'com.google.code.gson:gson:2.8.8'
    include 'com.github.JnCrMx:discord-game-sdk4j:v0.5.4'

    annotationProcessor "org.spongepowered:mixin:0.7.11-SNAPSHOT"

}

mixin {
    add sourceSets.main, 'mixins.scc.refmap.json'
}

processResources {
    inputs.property "version", mod_version
    inputs.property "mcversion", project.minecraft.version
    inputs.property 'name', mod_name
    inputs.property 'modid', mod_id
    inputs.property 'description', mod_description

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand(
                'version': mod_version,
                'mcversion': project.minecraft.version,
                'name': mod_name,
                'modid': mod_id,
                'description': mod_description
        )

    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}


shadowJar {
    archiveFileName = jar.archiveFileName
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    relocate("com.google.gson", "scc.googlecom.gson")

    exclude(
            "dummyThing",
            "LICENSE.md",
            "pack.mcmeta",
            "**/module-info.class",
            "*.so",
            "*.dylib",
            "*.dll",
            "*.jnilib",
            "ibxm/**",
            "com/jcraft/**",
            "org/lwjgl/**",
            "net/java/**",
            "META-INF/proguard/**",
            "META-INF/maven/**",
            "META-INF/versions/**",
            "META-INF/com.android.tools/**",
            "fabric.mod.json"
    )
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
    }
}

jar {
    manifest {
        attributes "ModSide": "CLIENT",
                "ForceLoadAsMod": true,
                "MixinConfigs": "mixins.scc.json",
                "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
                "TweakOrder": "0"
    }
}

reobfJar.dependsOn tasks.shadowJar

sourceSets {
    main {
        ext.refMap = "mixins.scc.refmap.json"
        output.resourcesDir = file("${buildDir}/classes/java/main")
    }
}